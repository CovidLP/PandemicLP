// Generated by rstantools.  Do not edit by hand.

/*
    pandemicLP is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pandemicLP is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pandemicLP.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_pandemicModels_multiWave_poisson_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 48, column 2 to column 21)",
                                                      " (in 'string', line 49, column 2 to column 61)",
                                                      " (in 'string', line 51, column 2 to column 27)",
                                                      " (in 'string', line 53, column 2 to column 29)",
                                                      " (in 'string', line 54, column 2 to column 29)",
                                                      " (in 'string', line 55, column 2 to column 29)",
                                                      " (in 'string', line 57, column 2 to column 33)",
                                                      " (in 'string', line 58, column 2 to column 24)",
                                                      " (in 'string', line 61, column 2 to column 39)",
                                                      " (in 'string', line 62, column 2 to column 35)",
                                                      " (in 'string', line 64, column 4 to column 14)",
                                                      " (in 'string', line 66, column 6 to line 72, column 10)",
                                                      " (in 'string', line 65, column 28 to line 73, column 5)",
                                                      " (in 'string', line 65, column 4 to line 73, column 5)",
                                                      " (in 'string', line 63, column 15 to line 74, column 3)",
                                                      " (in 'string', line 63, column 2 to line 74, column 3)",
                                                      " (in 'string', line 79, column 2 to column 18)",
                                                      " (in 'string', line 82, column 2 to column 28)",
                                                      " (in 'string', line 83, column 2 to column 40)",
                                                      " (in 'string', line 84, column 2 to column 28)",
                                                      " (in 'string', line 85, column 2 to column 40)",
                                                      " (in 'string', line 86, column 2 to column 34)",
                                                      " (in 'string', line 87, column 2 to column 34)",
                                                      " (in 'string', line 88, column 2 to column 34)",
                                                      " (in 'string', line 89, column 2 to column 33)",
                                                      " (in 'string', line 16, column 2 to column 17)",
                                                      " (in 'string', line 17, column 17 to column 18)",
                                                      " (in 'string', line 17, column 2 to column 20)",
                                                      " (in 'string', line 18, column 2 to column 11)",
                                                      " (in 'string', line 19, column 2 to column 27)",
                                                      " (in 'string', line 20, column 2 to column 23)",
                                                      " (in 'string', line 21, column 27 to column 34)",
                                                      " (in 'string', line 21, column 2 to column 36)",
                                                      " (in 'string', line 22, column 27 to column 34)",
                                                      " (in 'string', line 22, column 2 to column 36)",
                                                      " (in 'string', line 23, column 27 to column 34)",
                                                      " (in 'string', line 23, column 2 to column 36)",
                                                      " (in 'string', line 26, column 3 to column 25)",
                                                      " (in 'string', line 27, column 3 to column 24)",
                                                      " (in 'string', line 28, column 3 to column 17)",
                                                      " (in 'string', line 29, column 3 to column 30)",
                                                      " (in 'string', line 30, column 4 to column 26)",
                                                      " (in 'string', line 31, column 3 to column 24)",
                                                      " (in 'string', line 32, column 4 to column 30)",
                                                      " (in 'string', line 33, column 3 to column 30)",
                                                      " (in 'string', line 34, column 3 to column 27)",
                                                      " (in 'string', line 35, column 3 to column 26)",
                                                      " (in 'string', line 36, column 4 to column 28)",
                                                      " (in 'string', line 37, column 3 to column 26)",
                                                      " (in 'string', line 38, column 3 to column 27)",
                                                      " (in 'string', line 39, column 3 to column 26)",
                                                      " (in 'string', line 40, column 3 to column 16)",
                                                      " (in 'string', line 41, column 3 to column 28)",
                                                      " (in 'string', line 42, column 4 to column 28)",
                                                      " (in 'string', line 43, column 3 to column 26)",
                                                      " (in 'string', line 44, column 3 to column 25)",
                                                      " (in 'string', line 45, column 3 to column 24)",
                                                      " (in 'string', line 48, column 9 to column 16)",
                                                      " (in 'string', line 49, column 52 to column 59)",
                                                      " (in 'string', line 51, column 18 to column 25)",
                                                      " (in 'string', line 53, column 20 to column 27)",
                                                      " (in 'string', line 54, column 20 to column 27)",
                                                      " (in 'string', line 55, column 20 to column 27)",
                                                      " (in 'string', line 57, column 18 to column 25)",
                                                      " (in 'string', line 58, column 9 to column 16)",
                                                      " (in 'string', line 61, column 18 to column 25)",
                                                      " (in 'string', line 62, column 29 to column 30)",
                                                      " (in 'string', line 5, column 4 to column 59)",
                                                      " (in 'string', line 9, column 6 to column 23)",
                                                      " (in 'string', line 8, column 11 to line 10, column 5)",
                                                      " (in 'string', line 7, column 6 to column 18)",
                                                      " (in 'string', line 6, column 17 to line 8, column 5)",
                                                      " (in 'string', line 6, column 4 to line 10, column 5)",
                                                      " (in 'string', line 4, column 58 to line 11, column 3)"};
template <typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T1__, T2__,
T3__>
genLog(const int& t, const T1__& a, const T2__& b, const T3__& c,
       const int& logScale, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ logV;
    logV = DUMMY_VAR__;
    
    current_statement__ = 68;
    logV = (((stan::math::log(a) + stan::math::log(c)) - (c * t)) -
             (2 * stan::math::log((b + stan::math::exp((-c * t))))));
    current_statement__ = 73;
    if (logScale) {
      current_statement__ = 71;
      return logV;
    } else {
      current_statement__ = 69;
      return stan::math::exp(logV);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct genLog_functor__ {
template <typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T1__, T2__,
T3__>
operator()(const int& t, const T1__& a, const T2__& b, const T3__& c,
           const int& logScale, std::ostream* pstream__)  const 
{
return genLog(t, a, b, c, logScale, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_pandemicModels_multiWave_poisson final : public model_base_crtp<model_pandemicModels_multiWave_poisson> {
private:
  int n;
  std::vector<int> y;
  double pop;
  double p;
  int nCurves;
  std::vector<int> w1;
  std::vector<int> w2;
  std::vector<int> w3;
  double a_alpha;
  double a_beta;
  double mu_delta;
  double sigma2_delta;
  double c_alpha;
  double c_beta;
  double alpha_alpha;
  double alpha_beta;
  double d_1_alpha;
  double d_1_beta;
  double d_2_alpha;
  double d_2_beta;
  double d_3_alpha;
  double d_3_beta;
  double mu_b_1;
  double sigma2_b_1;
  double phi_alpha;
  double phi_beta;
  double f_alpha;
  double f_beta;
 
public:
  ~model_pandemicModels_multiWave_poisson() { }
  
  inline std::string model_name() const final { return "model_pandemicModels_multiWave_poisson"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_pandemicModels_multiWave_poisson(stan::io::var_context& context__,
                                         unsigned int random_seed__ = 0,
                                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_pandemicModels_multiWave_poisson_namespace::model_pandemicModels_multiWave_poisson";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 26;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec());
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 26;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 26;
      current_statement__ = 26;
      check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 27;
      validate_non_negative_index("y", "n", n);
      current_statement__ = 28;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(n));
      y = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 28;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);}
      current_statement__ = 29;
      context__.validate_dims("data initialization","pop","double",
          context__.to_vec());
      pop = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 29;
      pop = context__.vals_r("pop")[(1 - 1)];
      current_statement__ = 30;
      context__.validate_dims("data initialization","p","double",
          context__.to_vec());
      p = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 30;
      p = context__.vals_r("p")[(1 - 1)];
      current_statement__ = 30;
      current_statement__ = 30;
      check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 30;
      current_statement__ = 30;
      check_less_or_equal(function__, "p", p, 1);
      current_statement__ = 31;
      context__.validate_dims("data initialization","nCurves","int",
          context__.to_vec());
      nCurves = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      nCurves = context__.vals_i("nCurves")[(1 - 1)];
      current_statement__ = 31;
      current_statement__ = 31;
      check_greater_or_equal(function__, "nCurves", nCurves, 1);
      current_statement__ = 32;
      validate_non_negative_index("w1", "nCurves", nCurves);
      current_statement__ = 33;
      context__.validate_dims("data initialization","w1","int",
          context__.to_vec(nCurves));
      w1 = std::vector<int>(nCurves, std::numeric_limits<int>::min());
      
      current_statement__ = 33;
      assign(w1, nil_index_list(), context__.vals_i("w1"),
        "assigning variable w1");
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 33;
        current_statement__ = 33;
        check_greater_or_equal(function__, "w1[sym1__]", w1[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 33;
        current_statement__ = 33;
        check_less_or_equal(function__, "w1[sym1__]", w1[(sym1__ - 1)], 7);}
      current_statement__ = 34;
      validate_non_negative_index("w2", "nCurves", nCurves);
      current_statement__ = 35;
      context__.validate_dims("data initialization","w2","int",
          context__.to_vec(nCurves));
      w2 = std::vector<int>(nCurves, std::numeric_limits<int>::min());
      
      current_statement__ = 35;
      assign(w2, nil_index_list(), context__.vals_i("w2"),
        "assigning variable w2");
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_greater_or_equal(function__, "w2[sym1__]", w2[(sym1__ - 1)], 0);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_less_or_equal(function__, "w2[sym1__]", w2[(sym1__ - 1)], 7);}
      current_statement__ = 36;
      validate_non_negative_index("w3", "nCurves", nCurves);
      current_statement__ = 37;
      context__.validate_dims("data initialization","w3","int",
          context__.to_vec(nCurves));
      w3 = std::vector<int>(nCurves, std::numeric_limits<int>::min());
      
      current_statement__ = 37;
      assign(w3, nil_index_list(), context__.vals_i("w3"),
        "assigning variable w3");
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 37;
        current_statement__ = 37;
        check_greater_or_equal(function__, "w3[sym1__]", w3[(sym1__ - 1)], 0);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 37;
        current_statement__ = 37;
        check_less_or_equal(function__, "w3[sym1__]", w3[(sym1__ - 1)], 7);}
      current_statement__ = 38;
      context__.validate_dims("data initialization","a_alpha","double",
          context__.to_vec());
      a_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 38;
      a_alpha = context__.vals_r("a_alpha")[(1 - 1)];
      current_statement__ = 38;
      current_statement__ = 38;
      check_greater_or_equal(function__, "a_alpha", a_alpha, 0);
      current_statement__ = 39;
      context__.validate_dims("data initialization","a_beta","double",
          context__.to_vec());
      a_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 39;
      a_beta = context__.vals_r("a_beta")[(1 - 1)];
      current_statement__ = 39;
      current_statement__ = 39;
      check_greater_or_equal(function__, "a_beta", a_beta, 0);
      current_statement__ = 40;
      context__.validate_dims("data initialization","mu_delta","double",
          context__.to_vec());
      mu_delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 40;
      mu_delta = context__.vals_r("mu_delta")[(1 - 1)];
      current_statement__ = 41;
      context__.validate_dims("data initialization","sigma2_delta","double",
          context__.to_vec());
      sigma2_delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 41;
      sigma2_delta = context__.vals_r("sigma2_delta")[(1 - 1)];
      current_statement__ = 41;
      current_statement__ = 41;
      check_greater_or_equal(function__, "sigma2_delta", sigma2_delta, 0);
      current_statement__ = 42;
      context__.validate_dims("data initialization","c_alpha","double",
          context__.to_vec());
      c_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 42;
      c_alpha = context__.vals_r("c_alpha")[(1 - 1)];
      current_statement__ = 42;
      current_statement__ = 42;
      check_greater_or_equal(function__, "c_alpha", c_alpha, 0);
      current_statement__ = 43;
      context__.validate_dims("data initialization","c_beta","double",
          context__.to_vec());
      c_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 43;
      c_beta = context__.vals_r("c_beta")[(1 - 1)];
      current_statement__ = 43;
      current_statement__ = 43;
      check_greater_or_equal(function__, "c_beta", c_beta, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization","alpha_alpha","double",
          context__.to_vec());
      alpha_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 44;
      alpha_alpha = context__.vals_r("alpha_alpha")[(1 - 1)];
      current_statement__ = 44;
      current_statement__ = 44;
      check_greater_or_equal(function__, "alpha_alpha", alpha_alpha, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization","alpha_beta","double",
          context__.to_vec());
      alpha_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 45;
      alpha_beta = context__.vals_r("alpha_beta")[(1 - 1)];
      current_statement__ = 45;
      current_statement__ = 45;
      check_greater_or_equal(function__, "alpha_beta", alpha_beta, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization","d_1_alpha","double",
          context__.to_vec());
      d_1_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 46;
      d_1_alpha = context__.vals_r("d_1_alpha")[(1 - 1)];
      current_statement__ = 46;
      current_statement__ = 46;
      check_greater_or_equal(function__, "d_1_alpha", d_1_alpha, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization","d_1_beta","double",
          context__.to_vec());
      d_1_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 47;
      d_1_beta = context__.vals_r("d_1_beta")[(1 - 1)];
      current_statement__ = 47;
      current_statement__ = 47;
      check_greater_or_equal(function__, "d_1_beta", d_1_beta, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization","d_2_alpha","double",
          context__.to_vec());
      d_2_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 48;
      d_2_alpha = context__.vals_r("d_2_alpha")[(1 - 1)];
      current_statement__ = 48;
      current_statement__ = 48;
      check_greater_or_equal(function__, "d_2_alpha", d_2_alpha, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization","d_2_beta","double",
          context__.to_vec());
      d_2_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 49;
      d_2_beta = context__.vals_r("d_2_beta")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "d_2_beta", d_2_beta, 0);
      current_statement__ = 50;
      context__.validate_dims("data initialization","d_3_alpha","double",
          context__.to_vec());
      d_3_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 50;
      d_3_alpha = context__.vals_r("d_3_alpha")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "d_3_alpha", d_3_alpha, 0);
      current_statement__ = 51;
      context__.validate_dims("data initialization","d_3_beta","double",
          context__.to_vec());
      d_3_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 51;
      d_3_beta = context__.vals_r("d_3_beta")[(1 - 1)];
      current_statement__ = 51;
      current_statement__ = 51;
      check_greater_or_equal(function__, "d_3_beta", d_3_beta, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization","mu_b_1","double",
          context__.to_vec());
      mu_b_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      mu_b_1 = context__.vals_r("mu_b_1")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization","sigma2_b_1","double",
          context__.to_vec());
      sigma2_b_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      sigma2_b_1 = context__.vals_r("sigma2_b_1")[(1 - 1)];
      current_statement__ = 53;
      current_statement__ = 53;
      check_greater_or_equal(function__, "sigma2_b_1", sigma2_b_1, 0);
      current_statement__ = 54;
      context__.validate_dims("data initialization","phi_alpha","double",
          context__.to_vec());
      phi_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 54;
      phi_alpha = context__.vals_r("phi_alpha")[(1 - 1)];
      current_statement__ = 54;
      current_statement__ = 54;
      check_greater_or_equal(function__, "phi_alpha", phi_alpha, 0);
      current_statement__ = 55;
      context__.validate_dims("data initialization","phi_beta","double",
          context__.to_vec());
      phi_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 55;
      phi_beta = context__.vals_r("phi_beta")[(1 - 1)];
      current_statement__ = 55;
      current_statement__ = 55;
      check_greater_or_equal(function__, "phi_beta", phi_beta, 0);
      current_statement__ = 56;
      context__.validate_dims("data initialization","f_alpha","double",
          context__.to_vec());
      f_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 56;
      f_alpha = context__.vals_r("f_alpha")[(1 - 1)];
      current_statement__ = 56;
      current_statement__ = 56;
      check_greater_or_equal(function__, "f_alpha", f_alpha, 0);
      current_statement__ = 57;
      context__.validate_dims("data initialization","f_beta","double",
          context__.to_vec());
      f_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 57;
      f_beta = context__.vals_r("f_beta")[(1 - 1)];
      current_statement__ = 57;
      current_statement__ = 57;
      check_greater_or_equal(function__, "f_beta", f_beta, 0);
      current_statement__ = 58;
      validate_non_negative_index("b1", "nCurves", nCurves);
      current_statement__ = 59;
      validate_non_negative_index("a", "nCurves", nCurves);
      current_statement__ = 60;
      validate_non_negative_index("c", "nCurves", nCurves);
      current_statement__ = 61;
      validate_non_negative_index("d_1", "nCurves", nCurves);
      current_statement__ = 62;
      validate_non_negative_index("d_2", "nCurves", nCurves);
      current_statement__ = 63;
      validate_non_negative_index("d_3", "nCurves", nCurves);
      current_statement__ = 64;
      validate_non_negative_index("alpha", "nCurves", nCurves);
      current_statement__ = 65;
      validate_non_negative_index("delta", "nCurves", nCurves);
      current_statement__ = 66;
      validate_non_negative_index("b", "nCurves", nCurves);
      current_statement__ = 67;
      validate_non_negative_index("mu", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += nCurves;
      num_params_r__ += nCurves;
      num_params_r__ += nCurves;
      num_params_r__ += nCurves;
      num_params_r__ += nCurves;
      num_params_r__ += nCurves;
      num_params_r__ += nCurves;
      num_params_r__ += nCurves;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_pandemicModels_multiWave_poisson_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> b1;
      b1 = Eigen::Matrix<local_scalar_t__, -1, 1>(nCurves);
      stan::math::fill(b1, DUMMY_VAR__);
      
      current_statement__ = 1;
      b1 = in__.vector(nCurves);
      std::vector<local_scalar_t__> a;
      a = std::vector<local_scalar_t__>(nCurves, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 2;
        assign(a, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable a");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(a, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(a[(sym1__ - 1)], 0,
              min(multiply((p * pop), stan::math::exp(b1))), lp__),
            "assigning variable a");
        } else {
          current_statement__ = 2;
          assign(a, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(a[(sym1__ - 1)], 0,
              min(multiply((p * pop), stan::math::exp(b1)))),
            "assigning variable a");
        }}
      std::vector<local_scalar_t__> c;
      c = std::vector<local_scalar_t__>(nCurves, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 3;
        assign(c, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable c");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(c, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(c[(sym1__ - 1)], 0, lp__),
            "assigning variable c");
        } else {
          current_statement__ = 3;
          assign(c, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(c[(sym1__ - 1)], 0),
            "assigning variable c");
        }}
      std::vector<local_scalar_t__> d_1;
      d_1 = std::vector<local_scalar_t__>(nCurves, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 4;
        assign(d_1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable d_1");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(d_1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(d_1[(sym1__ - 1)], 0, lp__),
            "assigning variable d_1");
        } else {
          current_statement__ = 4;
          assign(d_1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(d_1[(sym1__ - 1)], 0),
            "assigning variable d_1");
        }}
      std::vector<local_scalar_t__> d_2;
      d_2 = std::vector<local_scalar_t__>(nCurves, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 5;
        assign(d_2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable d_2");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(d_2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(d_2[(sym1__ - 1)], 0, lp__),
            "assigning variable d_2");
        } else {
          current_statement__ = 5;
          assign(d_2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(d_2[(sym1__ - 1)], 0),
            "assigning variable d_2");
        }}
      std::vector<local_scalar_t__> d_3;
      d_3 = std::vector<local_scalar_t__>(nCurves, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 6;
        assign(d_3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable d_3");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(d_3, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(d_3[(sym1__ - 1)], 0, lp__),
            "assigning variable d_3");
        } else {
          current_statement__ = 6;
          assign(d_3, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(d_3[(sym1__ - 1)], 0),
            "assigning variable d_3");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(nCurves);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 7;
      alpha = in__.vector(nCurves);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha");
        } else {
          current_statement__ = 7;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
            "assigning variable alpha");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> delta;
      delta = Eigen::Matrix<local_scalar_t__, -1, 1>(nCurves);
      stan::math::fill(delta, DUMMY_VAR__);
      
      current_statement__ = 8;
      delta = in__.vector(nCurves);
      Eigen::Matrix<local_scalar_t__, -1, 1> b;
      b = Eigen::Matrix<local_scalar_t__, -1, 1>(nCurves);
      stan::math::fill(b, DUMMY_VAR__);
      
      current_statement__ = 9;
      assign(b, nil_index_list(), stan::math::exp(b1), "assigning variable b");
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 16;
      for (int t = 1; t <= n; ++t) {
        current_statement__ = 11;
        assign(mu, cons_list(index_uni(t), nil_index_list()), 0,
          "assigning variable mu");
        current_statement__ = 14;
        for (int curve = 1; curve <= nCurves; ++curve) {
          current_statement__ = 12;
          assign(mu, cons_list(index_uni(t), nil_index_list()),
            (mu[(t - 1)] +
              stan::math::exp(
                ((((normal_lcdf(
                      (alpha[(curve - 1)] * (t - delta[(curve - 1)])), 0, 1)
                     +
                     genLog(t, a[(curve - 1)], b[(curve - 1)],
                       c[(curve - 1)], 1, pstream__)) +
                    ((logical_eq(modulus((t - w1[(curve - 1)]), 7), 0) *
                       logical_gt(w1[(curve - 1)], 0)) *
                      stan::math::log(d_1[(curve - 1)]))) +
                   ((logical_eq(modulus((t - w2[(curve - 1)]), 7), 0) *
                      logical_gt(w2[(curve - 1)], 0)) *
                     stan::math::log(d_2[(curve - 1)]))) +
                  ((logical_eq(modulus((t - w3[(curve - 1)]), 7), 0) *
                     logical_gt(w3[(curve - 1)], 0)) *
                    stan::math::log(d_3[(curve - 1)]))))),
            "assigning variable mu");}}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_greater_or_equal(function__, "b[sym1__]", b[(sym1__ - 1)], 0);}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 10;
        current_statement__ = 10;
        check_greater_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], 0);
      }
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 10;
        current_statement__ = 10;
        check_less_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], pop);
      }
      {
        current_statement__ = 17;
        lp_accum__.add(poisson_lpmf<propto__>(y, mu));
        current_statement__ = 18;
        lp_accum__.add(gamma_lpdf<propto__>(a, a_alpha, a_beta));
        current_statement__ = 19;
        lp_accum__.add(normal_lpdf<propto__>(delta, mu_delta, sigma2_delta));
        current_statement__ = 20;
        lp_accum__.add(gamma_lpdf<propto__>(c, c_alpha, c_beta));
        current_statement__ = 21;
        lp_accum__.add(gamma_lpdf<propto__>(alpha, alpha_alpha, alpha_beta));
        current_statement__ = 22;
        lp_accum__.add(gamma_lpdf<propto__>(d_1, d_1_alpha, d_1_beta));
        current_statement__ = 23;
        lp_accum__.add(gamma_lpdf<propto__>(d_2, d_2_alpha, d_2_beta));
        current_statement__ = 24;
        lp_accum__.add(gamma_lpdf<propto__>(d_3, d_3_alpha, d_3_beta));
        current_statement__ = 25;
        lp_accum__.add(normal_lpdf<propto__>(b1, mu_b_1, sigma2_b_1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_pandemicModels_multiWave_poisson_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> b1;
      b1 = Eigen::Matrix<double, -1, 1>(nCurves);
      stan::math::fill(b1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      b1 = in__.vector(nCurves);
      std::vector<double> a;
      a = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 2;
        assign(a, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable a");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 2;
        assign(a, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(a[(sym1__ - 1)], 0,
            min(multiply((p * pop), stan::math::exp(b1)))),
          "assigning variable a");}
      std::vector<double> c;
      c = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 3;
        assign(c, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable c");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 3;
        assign(c, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(c[(sym1__ - 1)], 0),
          "assigning variable c");}
      std::vector<double> d_1;
      d_1 = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 4;
        assign(d_1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable d_1");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 4;
        assign(d_1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(d_1[(sym1__ - 1)], 0),
          "assigning variable d_1");}
      std::vector<double> d_2;
      d_2 = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 5;
        assign(d_2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable d_2");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 5;
        assign(d_2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(d_2[(sym1__ - 1)], 0),
          "assigning variable d_2");}
      std::vector<double> d_3;
      d_3 = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 6;
        assign(d_3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable d_3");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 6;
        assign(d_3, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(d_3[(sym1__ - 1)], 0),
          "assigning variable d_3");}
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(nCurves);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      alpha = in__.vector(nCurves);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 7;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha");}
      Eigen::Matrix<double, -1, 1> delta;
      delta = Eigen::Matrix<double, -1, 1>(nCurves);
      stan::math::fill(delta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      delta = in__.vector(nCurves);
      Eigen::Matrix<double, -1, 1> b;
      b = Eigen::Matrix<double, -1, 1>(nCurves);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(b1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(a[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(c[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(d_1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(d_2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(d_3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(delta[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 9;
      assign(b, nil_index_list(), stan::math::exp(b1), "assigning variable b");
      current_statement__ = 16;
      for (int t = 1; t <= n; ++t) {
        current_statement__ = 11;
        assign(mu, cons_list(index_uni(t), nil_index_list()), 0,
          "assigning variable mu");
        current_statement__ = 14;
        for (int curve = 1; curve <= nCurves; ++curve) {
          current_statement__ = 12;
          assign(mu, cons_list(index_uni(t), nil_index_list()),
            (mu[(t - 1)] +
              stan::math::exp(
                ((((normal_lcdf(
                      (alpha[(curve - 1)] * (t - delta[(curve - 1)])), 0, 1)
                     +
                     genLog(t, a[(curve - 1)], b[(curve - 1)],
                       c[(curve - 1)], 1, pstream__)) +
                    ((logical_eq(modulus((t - w1[(curve - 1)]), 7), 0) *
                       logical_gt(w1[(curve - 1)], 0)) *
                      stan::math::log(d_1[(curve - 1)]))) +
                   ((logical_eq(modulus((t - w2[(curve - 1)]), 7), 0) *
                      logical_gt(w2[(curve - 1)], 0)) *
                     stan::math::log(d_2[(curve - 1)]))) +
                  ((logical_eq(modulus((t - w3[(curve - 1)]), 7), 0) *
                     logical_gt(w3[(curve - 1)], 0)) *
                    stan::math::log(d_3[(curve - 1)]))))),
            "assigning variable mu");}}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_greater_or_equal(function__, "b[sym1__]", b[(sym1__ - 1)], 0);}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 10;
        current_statement__ = 10;
        check_greater_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], 0);
      }
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 10;
        current_statement__ = 10;
        check_less_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], pop);
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
          vars__.emplace_back(b[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          vars__.emplace_back(mu[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> b1;
      b1 = Eigen::Matrix<double, -1, 1>(nCurves);
      stan::math::fill(b1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b1_flat__;
        current_statement__ = 1;
        assign(b1_flat__, nil_index_list(), context__.vals_r("b1"),
          "assigning variable b1_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
          current_statement__ = 1;
          assign(b1, cons_list(index_uni(sym1__), nil_index_list()),
            b1_flat__[(pos__ - 1)], "assigning variable b1");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      std::vector<double> a;
      a = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(a, nil_index_list(), context__.vals_r("a"),
        "assigning variable a");
      std::vector<double> a_free__;
      a_free__ = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 2;
        assign(a_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(a[(sym1__ - 1)], 0,
            min(multiply((p * pop), stan::math::exp(b1)))),
          "assigning variable a_free__");}
      std::vector<double> c;
      c = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(c, nil_index_list(), context__.vals_r("c"),
        "assigning variable c");
      std::vector<double> c_free__;
      c_free__ = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 3;
        assign(c_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(c[(sym1__ - 1)], 0),
          "assigning variable c_free__");}
      std::vector<double> d_1;
      d_1 = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(d_1, nil_index_list(), context__.vals_r("d_1"),
        "assigning variable d_1");
      std::vector<double> d_1_free__;
      d_1_free__ = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 4;
        assign(d_1_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(d_1[(sym1__ - 1)], 0),
          "assigning variable d_1_free__");}
      std::vector<double> d_2;
      d_2 = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(d_2, nil_index_list(), context__.vals_r("d_2"),
        "assigning variable d_2");
      std::vector<double> d_2_free__;
      d_2_free__ = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 5;
        assign(d_2_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(d_2[(sym1__ - 1)], 0),
          "assigning variable d_2_free__");}
      std::vector<double> d_3;
      d_3 = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(d_3, nil_index_list(), context__.vals_r("d_3"),
        "assigning variable d_3");
      std::vector<double> d_3_free__;
      d_3_free__ = std::vector<double>(nCurves, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 6;
        assign(d_3_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(d_3[(sym1__ - 1)], 0),
          "assigning variable d_3_free__");}
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(nCurves);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 7;
        assign(alpha_flat__, nil_index_list(), context__.vals_r("alpha"),
          "assigning variable alpha_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
          current_statement__ = 7;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_flat__[(pos__ - 1)], "assigning variable alpha");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_free__;
      alpha_free__ = Eigen::Matrix<double, -1, 1>(nCurves);
      stan::math::fill(alpha_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        current_statement__ = 7;
        assign(alpha_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha_free__");}
      Eigen::Matrix<double, -1, 1> delta;
      delta = Eigen::Matrix<double, -1, 1>(nCurves);
      stan::math::fill(delta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 8;
        assign(delta_flat__, nil_index_list(), context__.vals_r("delta"),
          "assigning variable delta_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
          current_statement__ = 8;
          assign(delta, cons_list(index_uni(sym1__), nil_index_list()),
            delta_flat__[(pos__ - 1)], "assigning variable delta");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(b1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(a_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(c_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(d_1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(d_2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(d_3_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(alpha_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        vars__.emplace_back(delta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("b1");
    names__.emplace_back("a");
    names__.emplace_back("c");
    names__.emplace_back("d_1");
    names__.emplace_back("d_2");
    names__.emplace_back("d_3");
    names__.emplace_back("alpha");
    names__.emplace_back("delta");
    names__.emplace_back("b");
    names__.emplace_back("mu");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nCurves)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nCurves)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nCurves)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nCurves)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nCurves)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nCurves)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nCurves)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nCurves)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nCurves)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "d_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "d_2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "d_3" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "d_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "d_2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "d_3" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nCurves; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b1\",\"type\":{\"name\":\"vector\",\"length\":" << nCurves << "},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" << nCurves << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"array\",\"length\":" << nCurves << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"d_1\",\"type\":{\"name\":\"array\",\"length\":" << nCurves << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"d_2\",\"type\":{\"name\":\"array\",\"length\":" << nCurves << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"d_3\",\"type\":{\"name\":\"array\",\"length\":" << nCurves << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << nCurves << "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" << nCurves << "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" << nCurves << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b1\",\"type\":{\"name\":\"vector\",\"length\":" << nCurves << "},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" << nCurves << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"array\",\"length\":" << nCurves << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"d_1\",\"type\":{\"name\":\"array\",\"length\":" << nCurves << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"d_2\",\"type\":{\"name\":\"array\",\"length\":" << nCurves << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"d_3\",\"type\":{\"name\":\"array\",\"length\":" << nCurves << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << nCurves << "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" << nCurves << "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" << nCurves << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_pandemicModels_multiWave_poisson_namespace::model_pandemicModels_multiWave_poisson;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_pandemicModels_multiWave_poisson_namespace::profiles__;
}
#endif
#endif
