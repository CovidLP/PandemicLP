// Generated by rstantools.  Do not edit by hand.

/*
    pandemicLP is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pandemicLP is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pandemicLP.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_pandemicModels_singleWave_negbin_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 50, column 2 to column 10)",
                                                      " (in 'string', line 51, column 2 to column 23)",
                                                      " (in 'string', line 52, column 2 to column 43)",
                                                      " (in 'string', line 53, column 2 to column 18)",
                                                      " (in 'string', line 55, column 2 to column 20)",
                                                      " (in 'string', line 56, column 2 to column 20)",
                                                      " (in 'string', line 57, column 2 to column 20)",
                                                      " (in 'string', line 59, column 2 to column 27)",
                                                      " (in 'string', line 60, column 2 to column 28)",
                                                      " (in 'string', line 63, column 2 to column 28)",
                                                      " (in 'string', line 64, column 2 to column 35)",
                                                      " (in 'string', line 66, column 4 to column 140)",
                                                      " (in 'string', line 65, column 15 to line 67, column 3)",
                                                      " (in 'string', line 65, column 2 to line 67, column 3)",
                                                      " (in 'string', line 72, column 2 to column 22)",
                                                      " (in 'string', line 73, column 2 to column 31)",
                                                      " (in 'string', line 76, column 3 to column 29)",
                                                      " (in 'string', line 77, column 2 to column 28)",
                                                      " (in 'string', line 78, column 2 to column 28)",
                                                      " (in 'string', line 79, column 2 to column 34)",
                                                      " (in 'string', line 80, column 2 to column 34)",
                                                      " (in 'string', line 81, column 2 to column 34)",
                                                      " (in 'string', line 82, column 2 to column 34)",
                                                      " (in 'string', line 83, column 2 to column 33)",
                                                      " (in 'string', line 17, column 2 to column 17)",
                                                      " (in 'string', line 18, column 17 to column 18)",
                                                      " (in 'string', line 18, column 2 to column 20)",
                                                      " (in 'string', line 19, column 2 to column 11)",
                                                      " (in 'string', line 20, column 2 to column 27)",
                                                      " (in 'string', line 21, column 2 to column 27)",
                                                      " (in 'string', line 22, column 2 to column 27)",
                                                      " (in 'string', line 23, column 2 to column 27)",
                                                      " (in 'string', line 24, column 2 to column 23)",
                                                      " (in 'string', line 25, column 2 to column 25)",
                                                      " (in 'string', line 28, column 3 to column 25)",
                                                      " (in 'string', line 29, column 3 to column 24)",
                                                      " (in 'string', line 30, column 3 to column 17)",
                                                      " (in 'string', line 31, column 3 to column 30)",
                                                      " (in 'string', line 32, column 4 to column 26)",
                                                      " (in 'string', line 33, column 3 to column 24)",
                                                      " (in 'string', line 34, column 4 to column 30)",
                                                      " (in 'string', line 35, column 3 to column 30)",
                                                      " (in 'string', line 36, column 3 to column 27)",
                                                      " (in 'string', line 37, column 3 to column 26)",
                                                      " (in 'string', line 38, column 4 to column 28)",
                                                      " (in 'string', line 39, column 3 to column 26)",
                                                      " (in 'string', line 40, column 3 to column 27)",
                                                      " (in 'string', line 41, column 3 to column 26)",
                                                      " (in 'string', line 42, column 3 to column 16)",
                                                      " (in 'string', line 43, column 3 to column 28)",
                                                      " (in 'string', line 44, column 4 to column 28)",
                                                      " (in 'string', line 45, column 3 to column 26)",
                                                      " (in 'string', line 46, column 3 to column 25)",
                                                      " (in 'string', line 47, column 3 to column 24)",
                                                      " (in 'string', line 60, column 18 to column 19)",
                                                      " (in 'string', line 64, column 29 to column 30)",
                                                      " (in 'string', line 6, column 4 to column 71)",
                                                      " (in 'string', line 10, column 6 to column 23)",
                                                      " (in 'string', line 9, column 11 to line 11, column 5)",
                                                      " (in 'string', line 8, column 6 to column 18)",
                                                      " (in 'string', line 7, column 17 to line 9, column 5)",
                                                      " (in 'string', line 7, column 4 to line 11, column 5)",
                                                      " (in 'string', line 5, column 68 to line 12, column 3)"};
template <typename T1__, typename T2__, typename T3__, typename T4__>
stan::promote_args_t<T1__, T2__, T3__,
T4__>
genLog(const int& t, const T1__& a, const T2__& b, const T3__& c,
       const T4__& f, const int& logScale, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__, T3__, T4__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ logV;
    logV = DUMMY_VAR__;
    
    current_statement__ = 57;
    logV = ((((stan::math::log(f) + stan::math::log(a)) + stan::math::log(c))
              - (c * t)) -
             ((f + 1) * stan::math::log((b + stan::math::exp((-c * t))))));
    current_statement__ = 62;
    if (logScale) {
      current_statement__ = 60;
      return logV;
    } else {
      current_statement__ = 58;
      return stan::math::exp(logV);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct genLog_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T4__>
stan::promote_args_t<T1__, T2__, T3__,
T4__>
operator()(const int& t, const T1__& a, const T2__& b, const T3__& c,
           const T4__& f, const int& logScale, std::ostream* pstream__)  const 
{
return genLog(t, a, b, c, f, logScale, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_pandemicModels_singleWave_negbin final : public model_base_crtp<model_pandemicModels_singleWave_negbin> {
private:
  int n;
  std::vector<int> y;
  double pop;
  double p;
  int w1;
  int w2;
  int w3;
  double fTrunc;
  double phiTrunc;
  double a_alpha;
  double a_beta;
  double mu_delta;
  double sigma2_delta;
  double c_alpha;
  double c_beta;
  double alpha_alpha;
  double alpha_beta;
  double d_1_alpha;
  double d_1_beta;
  double d_2_alpha;
  double d_2_beta;
  double d_3_alpha;
  double d_3_beta;
  double mu_b_1;
  double sigma2_b_1;
  double phi_alpha;
  double phi_beta;
  double f_alpha;
  double f_beta;
 
public:
  ~model_pandemicModels_singleWave_negbin() { }
  
  inline std::string model_name() const final { return "model_pandemicModels_singleWave_negbin"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_pandemicModels_singleWave_negbin(stan::io::var_context& context__,
                                         unsigned int random_seed__ = 0,
                                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_pandemicModels_singleWave_negbin_namespace::model_pandemicModels_singleWave_negbin";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 25;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec());
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 25;
      current_statement__ = 25;
      check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 26;
      validate_non_negative_index("y", "n", n);
      current_statement__ = 27;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(n));
      y = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 27;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);}
      current_statement__ = 28;
      context__.validate_dims("data initialization","pop","double",
          context__.to_vec());
      pop = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 28;
      pop = context__.vals_r("pop")[(1 - 1)];
      current_statement__ = 29;
      context__.validate_dims("data initialization","p","double",
          context__.to_vec());
      p = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 29;
      p = context__.vals_r("p")[(1 - 1)];
      current_statement__ = 29;
      current_statement__ = 29;
      check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 29;
      current_statement__ = 29;
      check_less_or_equal(function__, "p", p, 1);
      current_statement__ = 30;
      context__.validate_dims("data initialization","w1","int",
          context__.to_vec());
      w1 = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      w1 = context__.vals_i("w1")[(1 - 1)];
      current_statement__ = 30;
      current_statement__ = 30;
      check_greater_or_equal(function__, "w1", w1, 0);
      current_statement__ = 30;
      current_statement__ = 30;
      check_less_or_equal(function__, "w1", w1, 7);
      current_statement__ = 31;
      context__.validate_dims("data initialization","w2","int",
          context__.to_vec());
      w2 = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      w2 = context__.vals_i("w2")[(1 - 1)];
      current_statement__ = 31;
      current_statement__ = 31;
      check_greater_or_equal(function__, "w2", w2, 0);
      current_statement__ = 31;
      current_statement__ = 31;
      check_less_or_equal(function__, "w2", w2, 7);
      current_statement__ = 32;
      context__.validate_dims("data initialization","w3","int",
          context__.to_vec());
      w3 = std::numeric_limits<int>::min();
      
      current_statement__ = 32;
      w3 = context__.vals_i("w3")[(1 - 1)];
      current_statement__ = 32;
      current_statement__ = 32;
      check_greater_or_equal(function__, "w3", w3, 0);
      current_statement__ = 32;
      current_statement__ = 32;
      check_less_or_equal(function__, "w3", w3, 7);
      current_statement__ = 33;
      context__.validate_dims("data initialization","fTrunc","double",
          context__.to_vec());
      fTrunc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 33;
      fTrunc = context__.vals_r("fTrunc")[(1 - 1)];
      current_statement__ = 33;
      current_statement__ = 33;
      check_greater_or_equal(function__, "fTrunc", fTrunc, 0);
      current_statement__ = 34;
      context__.validate_dims("data initialization","phiTrunc","double",
          context__.to_vec());
      phiTrunc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 34;
      phiTrunc = context__.vals_r("phiTrunc")[(1 - 1)];
      current_statement__ = 34;
      current_statement__ = 34;
      check_greater_or_equal(function__, "phiTrunc", phiTrunc, 0);
      current_statement__ = 35;
      context__.validate_dims("data initialization","a_alpha","double",
          context__.to_vec());
      a_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 35;
      a_alpha = context__.vals_r("a_alpha")[(1 - 1)];
      current_statement__ = 35;
      current_statement__ = 35;
      check_greater_or_equal(function__, "a_alpha", a_alpha, 0);
      current_statement__ = 36;
      context__.validate_dims("data initialization","a_beta","double",
          context__.to_vec());
      a_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 36;
      a_beta = context__.vals_r("a_beta")[(1 - 1)];
      current_statement__ = 36;
      current_statement__ = 36;
      check_greater_or_equal(function__, "a_beta", a_beta, 0);
      current_statement__ = 37;
      context__.validate_dims("data initialization","mu_delta","double",
          context__.to_vec());
      mu_delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 37;
      mu_delta = context__.vals_r("mu_delta")[(1 - 1)];
      current_statement__ = 38;
      context__.validate_dims("data initialization","sigma2_delta","double",
          context__.to_vec());
      sigma2_delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 38;
      sigma2_delta = context__.vals_r("sigma2_delta")[(1 - 1)];
      current_statement__ = 38;
      current_statement__ = 38;
      check_greater_or_equal(function__, "sigma2_delta", sigma2_delta, 0);
      current_statement__ = 39;
      context__.validate_dims("data initialization","c_alpha","double",
          context__.to_vec());
      c_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 39;
      c_alpha = context__.vals_r("c_alpha")[(1 - 1)];
      current_statement__ = 39;
      current_statement__ = 39;
      check_greater_or_equal(function__, "c_alpha", c_alpha, 0);
      current_statement__ = 40;
      context__.validate_dims("data initialization","c_beta","double",
          context__.to_vec());
      c_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 40;
      c_beta = context__.vals_r("c_beta")[(1 - 1)];
      current_statement__ = 40;
      current_statement__ = 40;
      check_greater_or_equal(function__, "c_beta", c_beta, 0);
      current_statement__ = 41;
      context__.validate_dims("data initialization","alpha_alpha","double",
          context__.to_vec());
      alpha_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 41;
      alpha_alpha = context__.vals_r("alpha_alpha")[(1 - 1)];
      current_statement__ = 41;
      current_statement__ = 41;
      check_greater_or_equal(function__, "alpha_alpha", alpha_alpha, 0);
      current_statement__ = 42;
      context__.validate_dims("data initialization","alpha_beta","double",
          context__.to_vec());
      alpha_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 42;
      alpha_beta = context__.vals_r("alpha_beta")[(1 - 1)];
      current_statement__ = 42;
      current_statement__ = 42;
      check_greater_or_equal(function__, "alpha_beta", alpha_beta, 0);
      current_statement__ = 43;
      context__.validate_dims("data initialization","d_1_alpha","double",
          context__.to_vec());
      d_1_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 43;
      d_1_alpha = context__.vals_r("d_1_alpha")[(1 - 1)];
      current_statement__ = 43;
      current_statement__ = 43;
      check_greater_or_equal(function__, "d_1_alpha", d_1_alpha, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization","d_1_beta","double",
          context__.to_vec());
      d_1_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 44;
      d_1_beta = context__.vals_r("d_1_beta")[(1 - 1)];
      current_statement__ = 44;
      current_statement__ = 44;
      check_greater_or_equal(function__, "d_1_beta", d_1_beta, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization","d_2_alpha","double",
          context__.to_vec());
      d_2_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 45;
      d_2_alpha = context__.vals_r("d_2_alpha")[(1 - 1)];
      current_statement__ = 45;
      current_statement__ = 45;
      check_greater_or_equal(function__, "d_2_alpha", d_2_alpha, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization","d_2_beta","double",
          context__.to_vec());
      d_2_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 46;
      d_2_beta = context__.vals_r("d_2_beta")[(1 - 1)];
      current_statement__ = 46;
      current_statement__ = 46;
      check_greater_or_equal(function__, "d_2_beta", d_2_beta, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization","d_3_alpha","double",
          context__.to_vec());
      d_3_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 47;
      d_3_alpha = context__.vals_r("d_3_alpha")[(1 - 1)];
      current_statement__ = 47;
      current_statement__ = 47;
      check_greater_or_equal(function__, "d_3_alpha", d_3_alpha, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization","d_3_beta","double",
          context__.to_vec());
      d_3_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 48;
      d_3_beta = context__.vals_r("d_3_beta")[(1 - 1)];
      current_statement__ = 48;
      current_statement__ = 48;
      check_greater_or_equal(function__, "d_3_beta", d_3_beta, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization","mu_b_1","double",
          context__.to_vec());
      mu_b_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 49;
      mu_b_1 = context__.vals_r("mu_b_1")[(1 - 1)];
      current_statement__ = 50;
      context__.validate_dims("data initialization","sigma2_b_1","double",
          context__.to_vec());
      sigma2_b_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 50;
      sigma2_b_1 = context__.vals_r("sigma2_b_1")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "sigma2_b_1", sigma2_b_1, 0);
      current_statement__ = 51;
      context__.validate_dims("data initialization","phi_alpha","double",
          context__.to_vec());
      phi_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 51;
      phi_alpha = context__.vals_r("phi_alpha")[(1 - 1)];
      current_statement__ = 51;
      current_statement__ = 51;
      check_greater_or_equal(function__, "phi_alpha", phi_alpha, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization","phi_beta","double",
          context__.to_vec());
      phi_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      phi_beta = context__.vals_r("phi_beta")[(1 - 1)];
      current_statement__ = 52;
      current_statement__ = 52;
      check_greater_or_equal(function__, "phi_beta", phi_beta, 0);
      current_statement__ = 53;
      context__.validate_dims("data initialization","f_alpha","double",
          context__.to_vec());
      f_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      f_alpha = context__.vals_r("f_alpha")[(1 - 1)];
      current_statement__ = 53;
      current_statement__ = 53;
      check_greater_or_equal(function__, "f_alpha", f_alpha, 0);
      current_statement__ = 54;
      context__.validate_dims("data initialization","f_beta","double",
          context__.to_vec());
      f_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 54;
      f_beta = context__.vals_r("f_beta")[(1 - 1)];
      current_statement__ = 54;
      current_statement__ = 54;
      check_greater_or_equal(function__, "f_beta", f_beta, 0);
      current_statement__ = 55;
      validate_non_negative_index("lambda", "n", n);
      current_statement__ = 56;
      validate_non_negative_index("mu", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += n;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_pandemicModels_singleWave_negbin_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ b1;
      b1 = DUMMY_VAR__;
      
      current_statement__ = 1;
      b1 = in__.scalar();
      local_scalar_t__ f;
      f = DUMMY_VAR__;
      
      current_statement__ = 2;
      f = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        f = stan::math::lb_constrain(f, fTrunc, lp__);
      } else {
        current_statement__ = 2;
        f = stan::math::lb_constrain(f, fTrunc);
      }
      local_scalar_t__ a;
      a = DUMMY_VAR__;
      
      current_statement__ = 3;
      a = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        a = stan::math::lub_constrain(a, 0,
              ((p * pop) * stan::math::exp((f * b1))), lp__);
      } else {
        current_statement__ = 3;
        a = stan::math::lub_constrain(a, 0,
              ((p * pop) * stan::math::exp((f * b1))));
      }
      local_scalar_t__ c;
      c = DUMMY_VAR__;
      
      current_statement__ = 4;
      c = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        c = stan::math::lb_constrain(c, 0, lp__);
      } else {
        current_statement__ = 4;
        c = stan::math::lb_constrain(c, 0);
      }
      local_scalar_t__ d_1;
      d_1 = DUMMY_VAR__;
      
      current_statement__ = 5;
      d_1 = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        d_1 = stan::math::lb_constrain(d_1, 0, lp__);
      } else {
        current_statement__ = 5;
        d_1 = stan::math::lb_constrain(d_1, 0);
      }
      local_scalar_t__ d_2;
      d_2 = DUMMY_VAR__;
      
      current_statement__ = 6;
      d_2 = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        d_2 = stan::math::lb_constrain(d_2, 0, lp__);
      } else {
        current_statement__ = 6;
        d_2 = stan::math::lb_constrain(d_2, 0);
      }
      local_scalar_t__ d_3;
      d_3 = DUMMY_VAR__;
      
      current_statement__ = 7;
      d_3 = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        d_3 = stan::math::lb_constrain(d_3, 0, lp__);
      } else {
        current_statement__ = 7;
        d_3 = stan::math::lb_constrain(d_3, 0);
      }
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      current_statement__ = 8;
      phi = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        phi = stan::math::lb_constrain(phi, phiTrunc, lp__);
      } else {
        current_statement__ = 8;
        phi = stan::math::lb_constrain(phi, phiTrunc);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda;
      lambda = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(lambda, DUMMY_VAR__);
      
      current_statement__ = 9;
      lambda = in__.vector(n);
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 9;
        if (jacobian__) {
          current_statement__ = 9;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda[(sym1__ - 1)], 0, lp__),
            "assigning variable lambda");
        } else {
          current_statement__ = 9;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda[(sym1__ - 1)], 0),
            "assigning variable lambda");
        }}
      local_scalar_t__ b;
      b = DUMMY_VAR__;
      
      current_statement__ = 10;
      b = stan::math::exp(b1);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 14;
      for (int t = 1; t <= n; ++t) {
        current_statement__ = 12;
        assign(mu, cons_list(index_uni(t), nil_index_list()),
          (((genLog(t, a, b, c, f, 0, pstream__) *
              pow(d_1,
                (logical_eq(modulus((t - w1), 7), 0) * logical_gt(w1, 0)))) *
             pow(d_2,
               (logical_eq(modulus((t - w2), 7), 0) * logical_gt(w2, 0)))) *
            pow(d_3,
              (logical_eq(modulus((t - w3), 7), 0) * logical_gt(w3, 0)))),
          "assigning variable mu");}
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "b", b, 0);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 11;
        current_statement__ = 11;
        check_greater_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], 0);
      }
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 11;
        current_statement__ = 11;
        check_less_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], pop);
      }
      {
        current_statement__ = 15;
        lp_accum__.add(poisson_lpmf<propto__>(y, lambda));
        current_statement__ = 16;
        lp_accum__.add(gamma_lpdf<propto__>(lambda, multiply(phi, mu), phi));
        current_statement__ = 17;
        lp_accum__.add(gamma_lpdf<propto__>(a, a_alpha, a_beta));
        current_statement__ = 18;
        lp_accum__.add(gamma_lpdf<propto__>(c, c_alpha, c_beta));
        current_statement__ = 19;
        lp_accum__.add(gamma_lpdf<propto__>(f, f_alpha, f_beta));
        current_statement__ = 20;
        lp_accum__.add(gamma_lpdf<propto__>(d_1, d_1_alpha, d_1_beta));
        current_statement__ = 21;
        lp_accum__.add(gamma_lpdf<propto__>(d_2, d_2_alpha, d_2_beta));
        current_statement__ = 22;
        lp_accum__.add(gamma_lpdf<propto__>(d_3, d_3_alpha, d_3_beta));
        current_statement__ = 23;
        lp_accum__.add(gamma_lpdf<propto__>(phi, phi_alpha, phi_beta));
        current_statement__ = 24;
        lp_accum__.add(normal_lpdf<propto__>(b1, mu_b_1, sigma2_b_1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_pandemicModels_singleWave_negbin_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double b1;
      b1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      b1 = in__.scalar();
      double f;
      f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      f = in__.scalar();
      current_statement__ = 2;
      f = stan::math::lb_constrain(f, fTrunc);
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      a = in__.scalar();
      current_statement__ = 3;
      a = stan::math::lub_constrain(a, 0,
            ((p * pop) * stan::math::exp((f * b1))));
      double c;
      c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      c = in__.scalar();
      current_statement__ = 4;
      c = stan::math::lb_constrain(c, 0);
      double d_1;
      d_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      d_1 = in__.scalar();
      current_statement__ = 5;
      d_1 = stan::math::lb_constrain(d_1, 0);
      double d_2;
      d_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      d_2 = in__.scalar();
      current_statement__ = 6;
      d_2 = stan::math::lb_constrain(d_2, 0);
      double d_3;
      d_3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      d_3 = in__.scalar();
      current_statement__ = 7;
      d_3 = stan::math::lb_constrain(d_3, 0);
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      phi = in__.scalar();
      current_statement__ = 8;
      phi = stan::math::lb_constrain(phi, phiTrunc);
      Eigen::Matrix<double, -1, 1> lambda;
      lambda = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(lambda, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      lambda = in__.vector(n);
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 9;
        assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(lambda[(sym1__ - 1)], 0),
          "assigning variable lambda");}
      double b;
      b = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(b1);
      vars__.emplace_back(f);
      vars__.emplace_back(a);
      vars__.emplace_back(c);
      vars__.emplace_back(d_1);
      vars__.emplace_back(d_2);
      vars__.emplace_back(d_3);
      vars__.emplace_back(phi);
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(lambda[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      b = stan::math::exp(b1);
      current_statement__ = 14;
      for (int t = 1; t <= n; ++t) {
        current_statement__ = 12;
        assign(mu, cons_list(index_uni(t), nil_index_list()),
          (((genLog(t, a, b, c, f, 0, pstream__) *
              pow(d_1,
                (logical_eq(modulus((t - w1), 7), 0) * logical_gt(w1, 0)))) *
             pow(d_2,
               (logical_eq(modulus((t - w2), 7), 0) * logical_gt(w2, 0)))) *
            pow(d_3,
              (logical_eq(modulus((t - w3), 7), 0) * logical_gt(w3, 0)))),
          "assigning variable mu");}
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "b", b, 0);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 11;
        current_statement__ = 11;
        check_greater_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], 0);
      }
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 11;
        current_statement__ = 11;
        check_less_or_equal(function__, "mu[sym1__]", mu[(sym1__ - 1)], pop);
      }
      if (emit_transformed_parameters__) {
        vars__.emplace_back(b);
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          vars__.emplace_back(mu[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double b1;
      b1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      b1 = context__.vals_r("b1")[(1 - 1)];
      double f;
      f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      f = context__.vals_r("f")[(1 - 1)];
      double f_free__;
      f_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      f_free__ = stan::math::lb_free(f, fTrunc);
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      a = context__.vals_r("a")[(1 - 1)];
      double a_free__;
      a_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      a_free__ = stan::math::lub_free(a, 0,
                   ((p * pop) * stan::math::exp((f * b1))));
      double c;
      c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      c = context__.vals_r("c")[(1 - 1)];
      double c_free__;
      c_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      c_free__ = stan::math::lb_free(c, 0);
      double d_1;
      d_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      d_1 = context__.vals_r("d_1")[(1 - 1)];
      double d_1_free__;
      d_1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      d_1_free__ = stan::math::lb_free(d_1, 0);
      double d_2;
      d_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      d_2 = context__.vals_r("d_2")[(1 - 1)];
      double d_2_free__;
      d_2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      d_2_free__ = stan::math::lb_free(d_2, 0);
      double d_3;
      d_3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      d_3 = context__.vals_r("d_3")[(1 - 1)];
      double d_3_free__;
      d_3_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      d_3_free__ = stan::math::lb_free(d_3, 0);
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      phi = context__.vals_r("phi")[(1 - 1)];
      double phi_free__;
      phi_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      phi_free__ = stan::math::lb_free(phi, phiTrunc);
      Eigen::Matrix<double, -1, 1> lambda;
      lambda = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(lambda, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 9;
        assign(lambda_flat__, nil_index_list(), context__.vals_r("lambda"),
          "assigning variable lambda_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 9;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            lambda_flat__[(pos__ - 1)], "assigning variable lambda");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda_free__;
      lambda_free__ = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(lambda_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 9;
        assign(lambda_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(lambda[(sym1__ - 1)], 0),
          "assigning variable lambda_free__");}
      vars__.emplace_back(b1);
      vars__.emplace_back(f_free__);
      vars__.emplace_back(a_free__);
      vars__.emplace_back(c_free__);
      vars__.emplace_back(d_1_free__);
      vars__.emplace_back(d_2_free__);
      vars__.emplace_back(d_3_free__);
      vars__.emplace_back(phi_free__);
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(lambda_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("b1");
    names__.emplace_back("f");
    names__.emplace_back("a");
    names__.emplace_back("c");
    names__.emplace_back("d_1");
    names__.emplace_back("d_2");
    names__.emplace_back("d_3");
    names__.emplace_back("phi");
    names__.emplace_back("lambda");
    names__.emplace_back("b");
    names__.emplace_back("mu");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "b1");
    param_names__.emplace_back(std::string() + "f");
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "d_1");
    param_names__.emplace_back(std::string() + "d_2");
    param_names__.emplace_back(std::string() + "d_3");
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "b");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "b1");
    param_names__.emplace_back(std::string() + "f");
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "d_1");
    param_names__.emplace_back(std::string() + "d_2");
    param_names__.emplace_back(std::string() + "d_3");
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "b");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_pandemicModels_singleWave_negbin_namespace::model_pandemicModels_singleWave_negbin;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_pandemicModels_singleWave_negbin_namespace::profiles__;
}
#endif
#endif
